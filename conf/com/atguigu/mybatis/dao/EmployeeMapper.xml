<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--不是用接口做映射，namespace可以随意取 -->
<!--<mapper namespace="com.atguigu.mybatis.employee">-->

<!--用接口做映射，namespace为接口引用名-->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
    <!-- <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
    <!--
    eviction:缓存的回收策略：
        • LRU – 最近最少使用的：移除最长时间不被使用的对象。
        • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
        • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
        • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        • 默认的是 LRU。
    flushInterval：缓存刷新间隔
        缓存多长时间清空一次，默认不清空，设置一个毫秒值
    readOnly:是否只读：
        true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
                 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
        false：非只读：mybatis觉得获取的数据可能会被修改。
                mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
    size：缓存存放多少元素；
    type=""：指定自定义缓存的全类名；
            实现Cache接口即可；
    -->


    <!--id为接口对应方法-->
    <!--Mybatis会为该接口生成一个代理对象-->
    <!--1.  在全局配置文件settings中mapUnderscoreToCamelCase设置为true，开启驼峰命名法映射：
        未开启前需要把last_name变为lastName：
           select id,last_name lastName,gender,email from tbl_employee where id = #{id}
        开启后数据库中last_name映射到字段名lastName-->
    <!--2.别名处理，在全局配置文件settings中typeAliase定义别名
        没有别名时需要全类名：com.atguigu.mybatis.bean.Employee
        有了别名只需要：Employee-->
    <!--3.根据数据库厂商别名databaseId建立不同的sql语句,默认情况下有限匹配带有databaseId且符合驱动类型的sql语句
        ，其次再匹配不带databaseId标识的sql语句-->
    <select id="getEmpById" resultType="employee" databaseId="mysql">
        select * from tbl_employee where id = #{id}
    </select>
    <select id="getEmpById" resultType="employee" databaseId="oracle">
        select * from Employees where id = #{id}
    </select>

    <!--  单个参数：mybatis不会做特殊处理，
	#{参数名/任意名}：取出参数值。

    多个参数：mybatis会做特殊处理。
	多个参数会被封装成 一个map，
		key：param1...paramN,或者参数的索引也可以
		value：传入的参数值
	#{}就是从map中获取指定的key的值；
		异常：
	org.apache.ibatis.binding.BindingException:
	Parameter 'id' not found.
	Available parameters are [1, 0, param1, param2]
	操作：
		方法：public Employee getEmpByIdAndLastName(Integer id,String lastName);
		取值：#{id},#{lastName}
    -->
<!--    <select id="getEmpByIdAndName" resultType="com.atguigu.mybatis.bean.Employee" >-->
<!--        select * from tbl_employee-->
<!--        where id = #{param1} and last_name=#{param2}-->
<!--    </select>-->

    <!--
    【命名参数】：明确指定封装参数时map的key；@Param("id")
	多个参数会被封装成 一个map，
		key：使用@Param注解指定的值
		value：参数值
	#{指定的key}取出对应的参数值  -->
    <select id="getEmpByIdAndName" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee
        where id = #{id} and last_name=#{name}
    </select>

    <!--POJO：
        如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo；
	        #{属性名}：取出传入的pojo的属性值

        Map：
            如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map
	        #{key}：取出map中对应的值

        TO：
    如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象
        Page{
	        int index;
	        int size;
        }
    #{}:是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入
	${}:取出的值直接拼装在sql语句中；会有安全问题；-->
    <select id="getEmpByMap" resultType="com.atguigu.mybatis.bean.Employee">
        select * from ${tableName}
        where id = #{id} and last_name=#{name}
    </select>

    <select id="getEmpsByNameLike" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{name}
    </select>
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id = #{id}
    </select>
    <select id="getEmpByNameLikeReturnMap" resultType="employee">
        select * from tbl_employee where last_name like #{name}
    </select>

    <!-- parameterType：参数类型，可以省略，
    获取自增主键的值：
    mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
    useGeneratedKeys="true"；使用自增主键获取主键值策略
    keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性-->
    <insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee"
        useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name,gender,email)
        values(#{lastName,jdbcType=NULL},#{gender},#{email})
    </insert>

    <!--
    获取非自增主键的值：
    Oracle不支持自增；Oracle使用序列来模拟自增；
    每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；-->
    <insert id="addEmp" databaseId="oracle">
        <!--
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER：当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序：
            先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
            在运行插入的sql；就可以取出id属性对应的值
        AFTER运行顺序：
            先运行插入的sql（从序列中取出新值作为id）；
            再运行selectKey查询id的sql；
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER：
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->})
        <!-- AFTER：
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email}) -->
    </insert>


    <update id="updateEmp" >
        update tbl_employee
        set last_name=#{lastName},gender=#{gender},email=#{email}
        where id=#{id}
    </update>
    
    <delete id="deleteEmp">
        delete from tbl_employee where id=#{id}
    </delete>

    <!--这里使用lastName到last_name的映射，使得数据库中last_name映射到字段名lastName  -->
    <!--id为使用session做标识-->
<!--    <select id="selectEmployee" resultType="com.atguigu.mybatis.bean.Employee">-->
<!--        select id,last_name lastName,gender,email from tbl_employee where id = #{id}-->
<!--    </select>-->
</mapper>